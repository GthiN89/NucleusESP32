
void listFiles(const char* dirPath = "/", uint8_t levels = 0) {
        File32 dir = sd1.open(dirPath);

    Serial.print(F("Listing directories in: "));
    Serial.println(dirPath);
 if (!dir.open("/")){
  }
  // Open next file in root.
  // Warning, openNext starts at the current position of dir so a
  // rewind may be necessary in your application.
  while (file1.openNext(&dir, O_RDONLY)) {
    file1.printFileSize(&Serial);
    Serial.write(' ');
    file1.printModifyDateTime(&Serial);
    Serial.write(' ');
    file1.printName(&Serial);
    // if (file.isDir()) {
    //   // Indicate a directory.
    //   Serial.write('/');
    // }
    Serial.println();
    file1.close();
  }
  if (dir.getError()) {
    Serial.println("openNext failed");
  } else {
    Serial.println("Done!");
  }


    if (!dir || !dir.isDirectory()) {
        Serial.print(F("Failed to open directory: "));
        Serial.println(dirPath);
        return;
    }

    File32 entry;
    while ((entry = dir.openNextFile())) {
        for (uint8_t i = 0; i < levels; i++) Serial.print(F("  "));  // Indent for readability
        
        if (entry.isDirectory()) {
            Serial.print(F("DIR : "));
            Serial.println(entry.name());
            
            // Recursively list contents of the directory
            String subDirPath = String(dirPath) + "/" + entry.name();
            listFiles(subDirPath.c_str(), levels + 1);
        } else {
            Serial.print(F("FILE: "));
            Serial.println(entry.name());
        }
        
        entry.close();  // Ensure file or directory is closed after each loop
    }
    dir.close();
}

void createFile(const char* filePath) {
    Serial.print(F("Creating file: "));
    Serial.println(filePath);
    File32 file = sd1.open(filePath, O_RDWR | O_CREAT | O_TRUNC);
    if (!file) {
        Serial.println(F("Failed to create file."));
    } else {
        Serial.println(F("File created successfully."));
    }
    file.close();
}

void writeFile(const char* filePath, const char* data, bool append = true) {
    Serial.print(F("Writing to file: "));
    Serial.println(filePath);
    File32 file = sd1.open(filePath, append ? O_RDWR | O_APPEND : O_RDWR | O_CREAT | O_TRUNC);
    if (!file) {
        Serial.println(F("Failed to open file for writing."));
        return;
    }
    file.print(data);
    file.close();
    Serial.println(F("Data written successfully."));
}

void readFile(const char* filePath) {
    Serial.print(F("Reading file: "));
    Serial.println(filePath);
    File32 file = sd1.open(filePath, O_RDONLY);
    if (!file) {
        Serial.println(F("Failed to open file for reading."));
        return;
    }
    while (file.available()) {
        Serial.write(file.read());
    }
    file.close();
    Serial.println(F("\nRead complete."));
}

void deleteFile1(const char* filePath) {
    Serial.print(F("Deleting file: "));
    Serial.println(filePath);
    if (sd1.remove(filePath)) {
        Serial.println(F("File deleted successfully."));
    } else {
        Serial.println(F("Failed to delete file."));
    }
}

void fileExists(const char* filePath) {
    Serial.print(F("Checking if file exists: "));
    Serial.println(filePath);
    if (sd1.exists(filePath)) {
        Serial.println(F("File exists."));
    } else {
        Serial.println(F("File does not exist."));
    }
}

void SDInitTests() {
    // Initialize the SD card
    if (!sd1.begin(SD_CONFIG)) {
        Serial.println(F("SD initialization failed."));
        return;
    }

    // List all files and directories at root level
    Serial.println(F("\n--- Listing Files and Directories ---"));
    listFiles("/");

    // Create a test file
    const char* testFilePath = "/testfile.txt";
    createFile(testFilePath);

    // Write to the test file (append)
    writeFile(testFilePath, "Appending this line.\n", true);

    // Overwrite the test file with new content
    writeFile(testFilePath, "This is a new line replacing previous content.\n", false);

    // Read from the test file
    Serial.println(F("\n--- Reading from test file ---"));
    readFile(testFilePath);

    // Check if file exists
    Serial.println(F("\n--- Checking File Existence ---"));
    fileExists(testFilePath);

    // Delete the test file
    Serial.println(F("\n--- Deleting test file ---"));
    deleteFile1(testFilePath);

    // Check if file exists after deletion
    fileExists(testFilePath);
}

void setup() {
  Serial.begin(115200);
  // Wait for USB Serial
  while (!Serial) {
    yield();
  }
//   Serial.println("Type any character to start");
//   while (!Serial.available()) {
//     yield();
//   }

  if (!sd1.begin(SD_CONFIG)) {
    sd1.initErrorHalt();
  }

  if (!file1.open("SoftSPI.txt", O_RDWR | O_CREAT)) {
    sd1.errorHalt(F("open failed"));
  }
  file1.println(F("This line was printed using software SPI."));

  file1.rewind();

  while (file1.available()) {
    Serial.write(file1.read());
  }

  file1.close();

  Serial.println(F("Done."));
