
#include <lvgl.h>




#include "Arduino.h"

// BLUETOOTH STUFF ///
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include "SourApple.h"

// User selectable variables
int deviceType = 4; // 1 for Airpods, 2 for Airpods Pro, 3 for Airpods Max, 4 for...
int delaySeconds = 2; // delay in seconds
int advType = 2; 
  // 0 - ADV_TYPE_IND
  // 1 - ADV_TYPE_DIRECT_IND_HIGH (directed advertisement with high duty cycle)
  // 2 - ADV_TYPE_SCAN_IND
  // 3 - ADV_NONCONN_IND
  // 4 - ADV_TYPE_DIRECT_IND_LOW (directed advertisement with low duty cycle)


// Bluetooth Server Stuff
//BLEAdvertising *pAdvertising;  

void sourApple::setup() {
 
  // BLEDevice::init("");

  // // Create the BLE Server
  // BLEServer *pServer = BLEDevice::createServer();

  //pAdvertising = pServer->getAdvertising();
  //BLEAdvertisementdataBLE oAdvertisementdataBLE = BLEAdvertisementdataBLE();

  // Payload dataBLE
  // uint8_t dataBLEAirpods[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x02, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  
  // uint8_t dataBLEAirpodsPro[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0e, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAirpodsMax[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0a, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAirpodsGen2[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0f, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAirpodsGen3[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x13, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAirpodsProGen2[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x14, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEPowerBeats[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x03, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEPowerBeatsPro[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0b, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsSoloPro[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0c, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsStudioBuds[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x11, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsFlex[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x10, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; 
  // uint8_t dataBLEBeatsX[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x05, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsSolo3[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x06, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsStudio3[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x09, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsStudioPro[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x17, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsFitPro[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x12, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEBeatsStudioBudsPlus[31] = {0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x16, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVSetup[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x01, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVPair[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x06, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVNewUser[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x20, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVAppleIDSetup[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x2b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVWirelessAudioSync[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0xc0, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVHomekitSetup[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0d, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVKeyboard[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x13, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEAppleTVConnectingToNetwork[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x27, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLEHomepodSetup[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLESetupNewPhone[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x09, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLETransferNumber[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x02, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
  // uint8_t dataBLETVColorBalance[23] = {0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x1e, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};

// Select the appropriate dataBLE based on the device type
// uint8_t* dataBLE;
// switch(deviceType) {
//   case 1:
//     dataBLE = dataBLEAirpods;
//     break;
//   case 2:
//     dataBLE = dataBLEAirpodsPro;
//     break;
//   case 3:
//     dataBLE = dataBLEAirpodsMax;
//     break;
//   case 4:
//     dataBLE = dataBLEAirpodsGen2;
//     break;
//   case 5:
//     dataBLE = dataBLEAirpodsGen3;
//     break;
//   case 6:
//     dataBLE = dataBLEAirpodsProGen2;
//     break;
//   case 7:
//     dataBLE = dataBLEPowerBeats;
//     break;
//   case 8:
//     dataBLE = dataBLEPowerBeatsPro;
//     break;
//   case 9:
//     dataBLE = dataBLEBeatsSoloPro;
//     break;
//   case 10:
//     dataBLE = dataBLEBeatsStudioBuds;
//     break;
//   case 11:
//     dataBLE = dataBLEBeatsFlex;
//     break;
//   case 12:
//     dataBLE = dataBLEBeatsX;
//     break;
//   case 13:
//     dataBLE = dataBLEBeatsSolo3;
//     break;
//   case 14:
//     dataBLE = dataBLEBeatsStudio3;
//     break;
//   case 15:
//     dataBLE = dataBLEBeatsStudioPro;
//     break;
//   case 16:
//     dataBLE = dataBLEBeatsFitPro;
//     break;
//   case 17:
//     dataBLE = dataBLEBeatsStudioBudsPlus;
//     break;
//   case 18:
//     dataBLE = dataBLEAppleTVSetup;
//     break;
//   case 19:
//     dataBLE = dataBLEAppleTVPair;
//     break;
//   case 20:
//     dataBLE = dataBLEAppleTVNewUser;
//     break;
//   case 21:
//     dataBLE = dataBLEAppleTVAppleIDSetup;
//     break;
//   case 22:
//     dataBLE = dataBLEAppleTVWirelessAudioSync;
//     break;
//   case 23:
//     dataBLE = dataBLEAppleTVHomekitSetup;
//     break;
//   case 24:
//     dataBLE = dataBLEAppleTVKeyboard;
//     break;
//   case 25:
//     dataBLE = dataBLEAppleTVConnectingToNetwork;
//     break;
//   case 26:
//     dataBLE = dataBLETVColorBalance;
//     break;
//   default:
//     dataBLE = dataBLEAirpods; // default to dataBLEAirpods if no valid deviceType is provided
//     break;
// }
  // This flag does not seem to be needed for ESP32 BLE
  //oAdvertisementdataBLE.setFlags(0x03);

  // Set the advertisement dataBLE type
  // switch(advType) {
  //   case 0:
  //     pAdvertising->setAdvertisementType(ADV_TYPE_IND);
  //     break;
  //   case 1:
  //     pAdvertising->setAdvertisementType(ADV_TYPE_DIRECT_IND_HIGH);
  //     break;
  //   case 2:
  //     pAdvertising->setAdvertisementType(ADV_TYPE_SCAN_IND);
  //     break;
  //   case 3:
  //     pAdvertising->setAdvertisementType(ADV_TYPE_NONCONN_IND);
  //     break;
  //   case 4:
  //     pAdvertising->setAdvertisementType(ADV_TYPE_DIRECT_IND_LOW);
  //     break;
  // }
  

  // Set up the advertisement dataBLE
 // oAdvertisementdataBLE.adddataBLE(std::string((char*)dataBLE, sizeof(dataBLEAirpods)));
 // pAdvertising->setAdvertisementdataBLE(oAdvertisementdataBLE);
}


void sourApple::loop()
{
  // pAdvertising->start();
  // delay(delaySeconds * 1000); // delay for delaySeconds seconds
  // pAdvertising->stop();
}

//// END BLUETOOTH STUFF ///


